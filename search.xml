<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kali-wsl自定义路径安装</title>
      <link href="/2023/09/23/jiao-cheng/kali-wsl-zi-ding-yi-lu-jing-an-zhuang/"/>
      <url>/2023/09/23/jiao-cheng/kali-wsl-zi-ding-yi-lu-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>wsl自定义安装发行路径，记录下安装过程，备份。wsl安装其他分发版本也可以按照该教程进行自定义路径安装。关于wsl以及虚拟化相关功能开启本教程已默认开启，关于开启该功能教程请百度一下。</p><h3 id="下载离线发行版"><a href="#下载离线发行版" class="headerlink" title="下载离线发行版"></a>下载离线发行版</h3><p>浏览器打开下方链接，搜索下载发行版，选择自己需要的分发下载即可。可能需要魔法。</p><p><strong><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">wsl分发下载</a></strong></p><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/cd40163c3dad0ef84dfd6.jpg" alt="wsl分发"></p><h3 id="解压分发"><a href="#解压分发" class="headerlink" title="解压分发"></a>解压分发</h3><p>下载的发行版，可能会是appx结尾，或者其他结尾，这个不重要，直接用解压缩软件将下载的包直接解压出来。直到看见一个exe文件即可。</p><p>注意： exe所在的目录则是该分发的自定义路径。建议执行前将exe文件所在目录的所有文件先移动到自己存放的路径</p><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/78508028c1e73fe5320e9.jpg" alt="解压目录"></p><h3 id="安装分发"><a href="#安装分发" class="headerlink" title="安装分发"></a>安装分发</h3><p>直接双击exe文件会进行初始化，根据提示创建用户和密码即可。当进入到linux里面时证明该wsl已安装完成。你会发现exe所在目录生成了一个磁盘文件vhdx。该文件则是该系统的磁盘文件。</p><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个文件夹用于存放字体</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/share/fonts/windows <span class="token comment"># 将Windows系统中的字体导入到kali中</span><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> /mnt/c/Windows/Fonts/*.ttf /usr/share/fonts/windows/<span class="token comment"># 下载字体管理器</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> fontconfig<span class="token comment"># 打开配置文件  此处需要vi操作知识。建议 vi 进入后 按 G 一定要大写模式 然后按 小写  o  再插入 export的所有命令</span><span class="token function">sudo</span> <span class="token function">vi</span> /etc/profile<span class="token comment"># 在上述文件中添加</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>zh_CN.UTF-8<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>zh_CN.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他分发到这里就已经结束，kali的话请继续往下看，由于kali是最小化安装所以需要再安装kali的完整工具包</p><h3 id="KaLi完整安装"><a href="#KaLi完整安装" class="headerlink" title="KaLi完整安装"></a>KaLi完整安装</h3><h4 id="检查更新和更新"><a href="#检查更新和更新" class="headerlink" title="检查更新和更新"></a>检查更新和更新</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">-y</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装完整工具包"><a href="#安装完整工具包" class="headerlink" title="安装完整工具包"></a>安装完整工具包</h4><p>这里安装可能耗时比较长请耐心等待</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> kali-linux-large<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/c66fff46094140b49e7a0.png" alt="语言"></p><h5 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/9d5d6e871cc5ec6300aa9.png" alt="DHCP"></p><h5 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/f0ed0f0210dddeb6d8a28.png" alt="wireshark"></p><h5 id="kismet"><a href="#kismet" class="headerlink" title="kismet"></a>kismet</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/a555be4e903fd54a85e1d.png" alt="kismet"></p><h5 id="sslh"><a href="#sslh" class="headerlink" title="sslh"></a>sslh</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/18c446ca82df21fe1ada5.png" alt="sslh"></p><h4 id="验证工具"><a href="#验证工具" class="headerlink" title="验证工具"></a>验证工具</h4><p>出现下图情况证明包安装成功，可以愉快的玩耍了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/e3ea2cd1ae568f248e5a4.jpg" alt="nmap"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机顶盒秒变服务器</title>
      <link href="/2023/09/03/jiao-cheng/ji-ding-he-bian-fu-wu-qi/"/>
      <url>/2023/09/03/jiao-cheng/ji-ding-he-bian-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>从酷安上了解到极低成本的服务器，那就是将机顶盒刷入armbian系统。启动6~7个docker也无压力；机顶盒功率也才几瓦。跑跑自己的脚本啥的完全够用。故立马在某鱼上捡垃圾，最后70块上车9新魔百和M401A盒子(2+16)+电源，已root。借此记录刷入流程，供大家参考。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、<strong>8G&gt;&#x3D;U盘 一个</strong>(必须是好的 🙄)</p><p>2、<strong>网线一根</strong>(肯定能连上网的 👌)</p><p>3、<strong>电脑一台</strong>(笔记本不行，因为机顶盒需要键盘，不能拆笔记本的，口子也对不上 😜)</p><p>4、<strong>键盘一个</strong>(机顶盒不能意念写入( •̀ ω •́ )✧)</p><p>以上有的就不用操心了，耐心等盒子到手就OK。可以先将armbian镜像写入到U盘。</p><h3 id="镜像写入U盘"><a href="#镜像写入U盘" class="headerlink" title="镜像写入U盘"></a>镜像写入U盘</h3><p>准备刷写工具：</p><p><a href="https://etcher.balena.io/">balenaEtcher</a></p><h4 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h4><p>我是购买的魔百和M401A机顶盒 使用的芯片是amlogic-s905l3a，使用的镜像是ophub大佬的开源仓库<a href="https://github.com/ophub/amlogic-s9xxx-armbian">amlogic-s9xxx-armbian</a> (由衷感谢ophub大佬 ❤)</p><p>进入仓库后前往release下载对应芯片的armbian系统(这里jammy是基于Ubuntu的镜像，bullseye 是基于Debian的镜像，看自己选择了)<br>Armbian_23.08.0_amlogic_s905l3a_jammy_6.1.46_server_2023.08.19.img.gz 镜像</p><p><img src="https://im.gurl.eu.org/file/dcddfd70c279c5d46a06f.png" alt="镜像"></p><p><strong>Tips</strong>:</p><p>镜像若非img结尾则是一个非镜像文件需要解压</p><h4 id="刷写镜像"><a href="#刷写镜像" class="headerlink" title="刷写镜像"></a>刷写镜像</h4><p>U盘插入电脑，打开balenaEtcher，点击“<strong>从文件烧录</strong>”选择下载的镜像文件(img结尾的)，选择目标磁盘为我们的U盘，点击烧录即可。此时等待烧录完成和校验，U盘会自动弹出。此时我们的系统已写入到U盘中。</p><p><img src="https://im.gurl.eu.org/file/5ac23b0a58a238b523b94.png" alt="烧录镜像"></p><h4 id="修改引导为我们的机顶盒芯片"><a href="#修改引导为我们的机顶盒芯片" class="headerlink" title="修改引导为我们的机顶盒芯片"></a>修改引导为我们的机顶盒芯片</h4><p>1、U盘重新插入电脑，若能读取到U盘文件则打开boot文件夹下的 <strong>dtb&#x2F;amlogic&#x2F;</strong> 查找一下对应芯片名称的dtb文件并复制该dtb文件的名称</p><p>2、编辑boot文件夹下的<strong>uEnv.txt</strong>文件,将FDT的最后dtb文件名提换成上一步复制的文件名称并保存uEnv文件</p><p><img src="https://im.gurl.eu.org/file/a96fdd8ae2d5a05bf5bec.png" alt="uEnv文件"></p><p><strong>Tips</strong>:</p><p>1、若U盘插入后windows无法识别到U盘最简单的解决方式是换一个Apple电脑插入进行修改。(不得不说苹果🍎大法好)</p><p>2、若没有苹果电脑可以尝试windows 磁盘管理 看是否存在磁盘未被设定盘符导致无法加载到<strong>我的电脑</strong>，若有的话设定一下盘符既可打开U盘内容</p><p><strong>以上准备工作就已经准备OK，机顶盒到手就可以刷入。</strong></p><h3 id="armbian刷入机顶盒"><a href="#armbian刷入机顶盒" class="headerlink" title="armbian刷入机顶盒"></a>armbian刷入机顶盒</h3><p>首先还是先将机顶盒接电，正常启动先验证下机顶盒是否正常。(毕竟二手先确认货正不正)</p><h4 id="外置启动"><a href="#外置启动" class="headerlink" title="外置启动"></a>外置启动</h4><p>1、正常插入网线、视频输出、电源启动机顶盒</p><p>2、当进入到盒子系统后，去到盒子的已安装的app目录会有一个外置启动器之类的外置启动。</p><p>3、点击外置启动当点击确认后立即，光速，风一样的插入刷写好系统的U盘到离网线插口最近的那个USB口上</p><p>4、此时等待机顶盒从外部启动我们刷写到U盘中的armbian系统</p><p>5、当你看到屏幕开始刷代码(彩虹)的时候证明就已经进入到armbian系统了</p><p>6、当加载完成后会停在输入密码的阶段，输入密码<strong>1234</strong></p><p>7、选择shell类型，选择1 <strong>bash</strong></p><p>8、创建一个用户，设置用户名和密码以及一些什么真实名称啥的</p><p>9、设置时区，和设置语言，若你插入了网线那这里会自动获取，只需要回车一下就行</p><p>9、等待初始化完成后就会进入到armbian系统了(此时启动的是我们U盘里面的系统)</p><p><img src="https://im.gurl.eu.org/file/8546315aaf28e61d99265.png" alt="5步骤"></p><p><img src="https://im.gurl.eu.org/file/c3a9d47d7f38dd5bb7e08.png" alt="7~9步骤"></p><h4 id="将系统写入到机顶盒"><a href="#将系统写入到机顶盒" class="headerlink" title="将系统写入到机顶盒"></a>将系统写入到机顶盒</h4><p>上一步中不是已经进入到系统了吗？ 直接输入写入命令(下方命令)此时会列出能够写入的机顶盒型号。选择我们对应的机顶盒型号并输入对应的ID，这里我的是M401A则<strong>选择ID”306“</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">armbian-install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://im.gurl.eu.org/file/76575a6eb7a18b7e7c1a6.png" alt="选择机顶盒型号"></p><p>2、选择系统磁盘格式为ext4,而后等待系统写入到机顶盒就行</p><p><img src="https://im.gurl.eu.org/file/bda5786faedf002ed3191.png" alt="磁盘格式"></p><p>3、当页面不在滚动出现<strong>root@armbian:~#</strong> 输入<strong>poweroff</strong>关机</p><p>4、当机顶盒完全关机后 拔下U盘，拔下电源，再重新插入电源，按电源键开机。此时若正常启动后会让输入登录用户名和密码输入root 或者刚我们创建的用户都行，当进入到下面页面则系统刷入成功，就可以愉快的玩耍啦。</p><p><img src="https://im.gurl.eu.org/file/1f9cfecb2370e6fa8b598.png" alt="进入系统"></p><h3 id="安装一些必要软件"><a href="#安装一些必要软件" class="headerlink" title="安装一些必要软件"></a>安装一些必要软件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新一下软件包索引</span><span class="token function">apt</span> update <span class="token parameter variable">-y</span><span class="token comment"># 安装nettools</span><span class="token function">apt</span> <span class="token function">install</span> net-tools <span class="token parameter variable">-y</span><span class="token comment"># 验证</span><span class="token function">ifconfig</span><span class="token comment"># 安装docker  选择docker ID 中途可能要选择下载软件的地址 选择阿里云的即可</span>armbian-software<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>整个刷写过程并不难，照着教程操作即可，若有问题百度一下就能解决。本次刷写我这边未遇到任何问题一把过。</p><p>接下来谈谈该如何使用可以安装docker 那玩法就多了，docker拉取青龙面板，作为脚本管理。也可以拉取lamp搭建靶场等。自己的一些定时脚本，安装HA做家具智能中控，安装openwrt做软路由等等。</p><p>刷新过程可参考：<br><a href="https://www.bilibili.com/video/BV1VL411z7Mk/?spm_id_from=pageDriver&vd_source=97daad23423657e272eee1d19843efcf">机顶盒刷armbian全程详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> armbian </tag>
            
            <tag> 魔百和 </tag>
            
            <tag> M401A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装docker</title>
      <link href="/2023/08/27/jiao-cheng/linux-an-zhuang-docker/"/>
      <url>/2023/08/27/jiao-cheng/linux-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<p>记录下docker服务的安装，目前只涉及到了centos系统，此贴会记录博主在不同系统中的docker安装教程。(其他的什么时候更新就看博主啥时候遇到了)</p><h3 id="CentOS-docker-安装"><a href="#CentOS-docker-安装" class="headerlink" title="CentOS docker 安装"></a>CentOS docker 安装</h3><h4 id="清除已安装的部分-若是新机器可跳过"><a href="#清除已安装的部分-若是新机器可跳过" class="headerlink" title="清除已安装的部分(若是新机器可跳过)"></a>清除已安装的部分(若是新机器可跳过)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>docker-client <span class="token punctuation">\</span>docker-client-latest <span class="token punctuation">\</span>docker-common <span class="token punctuation">\</span>docker-latest <span class="token punctuation">\</span>docker-latest-logrotate <span class="token punctuation">\</span>docker-logrotate <span class="token punctuation">\</span>docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="前置处理"><a href="#前置处理" class="headerlink" title="前置处理"></a>前置处理</h4><p>yum-complete-transaction    清理未完成事务<br>yum install -y yum-utils    安装依赖工具<br>yum clean all               清楚未完成的包和缓存<br>yum  update                 更新</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-complete-transaction <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token operator">&amp;&amp;</span> yum clean all <span class="token operator">&amp;&amp;</span> yum-complete-transaction <span class="token operator">&amp;&amp;</span> yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装底层依赖"><a href="#安装底层依赖" class="headerlink" title="安装底层依赖"></a>安装底层依赖</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="更新yum缓存"><a href="#更新yum缓存" class="headerlink" title="更新yum缓存"></a>更新yum缓存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> systemctl status <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试运行docker"><a href="#测试运行docker" class="headerlink" title="测试运行docker"></a>测试运行docker</h4><p>此步会输出hello-world，输出成功即docker安装成功，就可以愉快的玩耍啦。🎉🎉</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python生活-定时发送新闻联播到微信</title>
      <link href="/2023/07/09/yi-xie-jiao-ben/python-sheng-huo-ding-shi-fa-song-xin-wen-lian-bo-dao-wei-xin/"/>
      <url>/2023/07/09/yi-xie-jiao-ben/python-sheng-huo-ding-shi-fa-song-xin-wen-lian-bo-dao-wei-xin/</url>
      
        <content type="html"><![CDATA[<p>分享一个脚本，通过Python开发的一个新闻联播推送脚本。该项目应用场景广泛炒股的大佬们，新闻工作者，要考公的未来接班人以及需要了解国家大事的，都可以通过这个快速的获取到新闻联播信息。</p><p>免去了定时要去观看30分钟的新闻视频。直接文字输出新闻联播，一字不差。直接推送到微信邮箱(微信中的QQ邮箱提醒中绑定的邮箱)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>项目中分为两部分第一部分通过新闻联播地址获取新闻联播的文字内容，第二部分将文字内容发送到邮箱</p><p>我们来看下关键部分获取新闻联播的文字内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> datetime<span class="token keyword">import</span> yagmailheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4651.0 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token comment"># 获取新闻</span><span class="token keyword">def</span> <span class="token function">get_hanlder</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        rsp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        rsp<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        rsp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> rsp<span class="token punctuation">.</span>apparent_encoding        <span class="token comment"># print(rsp.text)</span>        <span class="token keyword">return</span> rsp<span class="token punctuation">.</span>text    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>RequestException <span class="token keyword">as</span> error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_news</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    rsp <span class="token operator">=</span> get_hanlder<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    etr <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>rsp<span class="token punctuation">)</span>    titles <span class="token operator">=</span> etr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li/a/text()"</span><span class="token punctuation">)</span>    hrefs <span class="token operator">=</span> etr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li/a/@href"</span><span class="token punctuation">)</span>    news <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    summary <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">for</span> title<span class="token punctuation">,</span> href <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>titles<span class="token punctuation">,</span> hrefs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'《新闻联播》'</span> <span class="token keyword">in</span> title<span class="token punctuation">:</span>            <span class="token comment"># 获取新闻概要</span>            title_rsp <span class="token operator">=</span> get_hanlder<span class="token punctuation">(</span>href<span class="token punctuation">)</span>            summary <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'&lt;div class="video_brief">本期节目主要内容：[\s\S]*。'</span><span class="token punctuation">,</span> title_rsp<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span>                <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;/div>\n\n\n"</span>            <span class="token keyword">continue</span>        <span class="token comment"># 新闻标题去掉视频并处理成超链接  橙色 #D2691E</span>        tit <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r"\[视频\]?"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>        subtitle <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'&lt;a href=\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>href<span class="token punctuation">&#125;</span></span><span class="token string">\" style="color:#4682B4">&lt;b></span><span class="token interpolation"><span class="token punctuation">&#123;</span>tit<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/b>&lt;/a>'</span></span>        summary <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>tit<span class="token punctuation">,</span> subtitle<span class="token punctuation">,</span> summary<span class="token punctuation">)</span>        <span class="token comment"># 获取新闻正文并添加到news</span>        news_text <span class="token operator">=</span> get_hanlder<span class="token punctuation">(</span>href<span class="token punctuation">)</span>        news_th <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'&lt;div class="content_area" id="content_area">.*&lt;/div>'</span><span class="token punctuation">,</span> news_text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        news<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>subtitle<span class="token punctuation">&#125;</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>news_th<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    news<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> summary<span class="token punctuation">)</span>    <span class="token keyword">return</span> news<span class="token keyword">def</span> <span class="token function">email_send</span><span class="token punctuation">(</span>rsp<span class="token punctuation">,</span> strdate<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 发送数据到邮箱 此处发送端为QQ邮箱</span>    yag <span class="token operator">=</span> yagmail<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'yourQQ@qq.com'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'your send code'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">465</span><span class="token punctuation">)</span>    yag<span class="token punctuation">.</span>send<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"acceptQQ1@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"acceptQQ2@qq.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> subject<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>strdate<span class="token punctuation">&#125;</span></span><span class="token string">日新闻联播推送"</span></span><span class="token punctuation">,</span> contents<span class="token operator">=</span>rsp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件已发送请查收...'</span><span class="token punctuation">)</span><span class="token comment"># event,context这两个参数不同的厂商是不同的名称，请根据厂商的示例进行修改即可</span><span class="token keyword">def</span> <span class="token function">scf_run</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取日期这里默认为第二天获取前一天的所以-1,若是当天获取则无需-1改为0即可</span>    strTime <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%d"</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://tv.cctv.com/lm/xwlb/day/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>strTime<span class="token punctuation">&#125;</span></span><span class="token string">.shtml'</span></span>    news_text <span class="token operator">=</span> get_news<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    email_send<span class="token punctuation">(</span>news_text<span class="token punctuation">,</span> strTime<span class="token punctuation">)</span><span class="token comment"># 若部署在云函数上请把下面这行注释掉,非云函数上不用注释</span>scf_run<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码释义：<br>首先将新闻联播页面通过Xpath获取我们需要获取的新闻联播的标题以及链接。再将链接和标题进行绑定循环取出并获取内容。<br>将获取的内容作为邮件的内容进行发送</p><p>tips:</p><p>1、默认调用时是获取前一天的内容，若需要获取当天的请把里面(datetime.date.today() + datetime.timedelta(-1)).strftime(“%Y%m%d”) 这段代码中的“-1”修改为“0”，若当天执行时为20:00前可能会获取不到因为当天的新闻还没出来</p><p>2、请注意修改发送者的邮箱和开启SMTP服务后的秘钥</p><h3 id="邮件展示"><a href="#邮件展示" class="headerlink" title="邮件展示"></a>邮件展示</h3><p><img src="https://im.gurl.eu.org/file/327217c814cecb814371b.png" alt="邮件展示"></p><h3 id="定时发送"><a href="#定时发送" class="headerlink" title="定时发送"></a>定时发送</h3><p>定时发送这里有两个选择，第一种就是自己有服务器，通过crontab 进行定时调用。第二种就是通过各大云厂商的云函数进行部署，设定函数触发时间即可。重要的是不需要掏服务器钱，云函数的每月免费额度以及够用了。（目前华为云的云函数是可以免费额度）</p>]]></content>
      
      
      <categories>
          
          <category> 一些脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 新闻 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
