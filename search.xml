<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>上传包到Pypi，共享给全球用户</title>
      <link href="/2024/01/26/jiao-cheng/shang-chuan-bao-dao-pypi/"/>
      <url>/2024/01/26/jiao-cheng/shang-chuan-bao-dao-pypi/</url>
      
        <content type="html"><![CDATA[<p>本文章记录将自己的Python包发布到Pypi上，供全球用户使用。</p><h4 id="构建包安装"><a href="#构建包安装" class="headerlink" title="构建包安装"></a>构建包安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装打包工具和上传工具</span></span><br><span class="line">python -m pip install build twine</span><br></pre></td></tr></table></figure><h4 id="你的项目结构分布"><a href="#你的项目结构分布" class="headerlink" title="你的项目结构分布"></a>你的项目结构分布</h4><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/4f07f9c650ac975de6402.jpg" alt="项目结构"></p><h4 id="setup内容"><a href="#setup内容" class="headerlink" title="setup内容"></a>setup内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;项目名&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;0.1.0&quot;</span>,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&quot;requests&gt;=2.22.0&quot;</span>  <span class="comment"># 这个只是示例</span></span><br><span class="line">        <span class="comment"># 在这里列出你的库所需的其他Python包</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    author=<span class="string">&quot;所有用户&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;邮箱&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;项目简单说明&quot;</span>,</span><br><span class="line">    long_description=<span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>).read(),  <span class="comment"># 读取README 文件作为项目介绍</span></span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>, <span class="comment"># 文档类型</span></span><br><span class="line">    license=<span class="string">&quot;MIT&quot;</span>, <span class="comment"># 协议</span></span><br><span class="line">    url=<span class="string">&quot;https://github.com/yourusername/my-awesome-package&quot;</span>, <span class="comment"># 项目地址</span></span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,  <span class="comment"># 代表支持 所有Python3</span></span><br><span class="line">        <span class="string">&quot;License :: OSI Approved :: GNU General Public License (GPL)&quot;</span>, <span class="comment"># lincense 说明</span></span><br><span class="line">        <span class="string">&quot;Operating System :: OS Independent&quot;</span>, <span class="comment"># 操作系统</span></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建操作，会在一级目录下生成build，dist等目录 dist则是打包好的文件，一般会是一个tar.gz 或者 whl</span> </span><br><span class="line">python -m build </span><br></pre></td></tr></table></figure><h4 id="上传准备"><a href="#上传准备" class="headerlink" title="上传准备"></a>上传准备</h4><ol><li>先注册一个Pypi账户。目前Pypi要求2FA验证登录(可以使用Google Authenticator)</li><li>获取一个API令牌</li><li>本地用户目录下创建一个.pypirc文件，文件内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[pypi]</span><br><span class="line">username = __token__</span><br><span class="line">password = API令牌</span><br></pre></td></tr></table></figure></li></ol><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可检查包是否冲突 可不执行</span></span><br><span class="line">twine check dist\*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传项目到pypi</span></span><br><span class="line">twine upload dist\*</span><br></pre></td></tr></table></figure><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/2b6e4727f5a723b554c79.jpg" alt="上传成功"></p><p>上传后输出包路径则说明上传包成功了，这个时候就可以去<a href="https://pypi.org/">pypi</a>搜索包名，或者直接打开输出的链接即可。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pypi </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下v2ray客户端安装</title>
      <link href="/2023/12/16/jiao-cheng/linux-xia-v2ray-ke-hu-duan-an-zhuang/"/>
      <url>/2023/12/16/jiao-cheng/linux-xia-v2ray-ke-hu-duan-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>为了在armbian上搭建一个v2ray的客户端供armbian使用，毕竟有些程序需要跑在armbian服务器上，linux同理。本次教程安装的v2rayA，使用web进行管理，方便。 使用docker进行搭建，请提前安装好docker</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>docker（略）</li><li>放开防火墙<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装ufw防火墙工具</span></span><br><span class="line">apt install ufw</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">ufw disable </span><br></pre></td></tr></table></figure></li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mzz2017/v2raya</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network=host \</span><br><span class="line">  --name v2raya \</span><br><span class="line">  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \</span><br><span class="line">  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \</span><br><span class="line">  -e V2RAYA_NFTABLES_SUPPORT=off \</span><br><span class="line">  -v /lib/modules:/lib/modules:ro \</span><br><span class="line">  -v /etc/resolv.conf:/etc/resolv.conf \</span><br><span class="line">  -v /etc/v2raya:/etc/v2raya \</span><br><span class="line">  mzz2017/v2raya</span><br></pre></td></tr></table></figure><p>查看运行状态<br><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/8d61972f09fd6e5954124.jpg" alt="运行"></p><h3 id="修改部分配置"><a href="#修改部分配置" class="headerlink" title="修改部分配置"></a>修改部分配置</h3><p>浏览器打开v2raya地址<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbianIP:2017</span><br></pre></td></tr></table></figure></p><p>首次进入会要求创建一个账户和密码进行管理</p><p>进入后导入订阅或添加服务端配置</p><p>设置中将端口转发开启，则放开了对应设置的各项端口，可在关于中查看</p><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/68ebc356db06bda4c51d2.jpg" alt="端口分享"></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>需要更新v2raya，非常方便，直接再次拉取一次镜像，将已启动的容器直接停止并删除，重新使用启动命令再启动一个即可，配置等已经在宿主机有保留。不必担心会丢失。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新</span></span><br><span class="line">docker pull mzz2017/v2raya</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop v2raya</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line">docker rm v2raya</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动新的容器</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network=host \</span><br><span class="line">  --name v2raya \</span><br><span class="line">  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \</span><br><span class="line">  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \</span><br><span class="line">  -e V2RAYA_NFTABLES_SUPPORT=off \</span><br><span class="line">  -v /lib/modules:/lib/modules:ro \</span><br><span class="line">  -v /etc/resolv.conf:/etc/resolv.conf \</span><br><span class="line">  -v /etc/v2raya:/etc/v2raya \</span><br><span class="line">  mzz2017/v2raya</span><br></pre></td></tr></table></figure><h3 id="非docker安装"><a href="#非docker安装" class="headerlink" title="非docker安装"></a>非docker安装</h3><p>可以使用该地址中的命令直接安装</p><p><strong><a href="https://github.com/v2rayA/v2rayA-installer">https://github.com/v2rayA/v2rayA-installer</a></strong></p><h4 id="可参考"><a href="#可参考" class="headerlink" title="可参考"></a>可参考</h4><h6 id="v2raya项目地址"><a href="#v2raya项目地址" class="headerlink" title="v2raya项目地址:"></a>v2raya项目地址:</h6><p><a href="https://github.com/v2rayA/v2rayA">https://github.com/v2rayA/v2rayA</a></p><h6 id="v2raya-docker地址："><a href="#v2raya-docker地址：" class="headerlink" title="v2raya docker地址："></a>v2raya docker地址：</h6><p><a href="https://hub.docker.com/r/mzz2017/v2raya">https://hub.docker.com/r/mzz2017/v2raya</a></p><h6 id="v2raya-文档地址-需要魔法-："><a href="#v2raya-文档地址-需要魔法-：" class="headerlink" title="v2raya 文档地址(需要魔法)："></a>v2raya 文档地址(需要魔法)：</h6><p><a href="https://v2raya.org/docs/prologue/introduction/">https://v2raya.org/docs/prologue/introduction/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> armbian </tag>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>armbian下安装Openwrt-Docker版</title>
      <link href="/2023/12/09/jiao-cheng/armbian-xia-an-zhuang-openwrt-docker-ban/"/>
      <url>/2023/12/09/jiao-cheng/armbian-xia-an-zhuang-openwrt-docker-ban/</url>
      
        <content type="html"><![CDATA[<p>前面将机顶盒刷写成armbian也已经安装docker，现在通过docker安装openwrt将armbian当做旁路由使用。主要还是为了解决家庭局域网爬梯问题。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>安装docker(略)</li><li>拉取openwrt镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取openwrt 镜像</span></span><br><span class="line"> docker pull unifreq/openwrt-aarch64</span><br></pre></td></tr></table></figure><p>openwrt-docker镜像地址：<a href="https://hub.docker.com/r/unifreq/openwrt-aarch64">https://hub.docker.com/r/unifreq/openwrt-aarch64</a></p><h3 id="网卡混杂模式"><a href="#网卡混杂模式" class="headerlink" title="网卡混杂模式"></a>网卡混杂模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link set eth0 promisc on</span><br></pre></td></tr></table></figure><h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 macnet</span><br></pre></td></tr></table></figure><p>–subnet: macvlan 网络所在的网络(一般就为自己的网段)</p><p>–gateway: 网关IP</p><p>-o parent: 用来分配 macvlan 网络的物理网卡</p><h3 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/20804a816929d345a33e7.png" alt="网络列表"></p><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -d \</span><br><span class="line">  --name=openwrt \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  --network=macnet \</span><br><span class="line">  --privileged \</span><br><span class="line">  --ip=192.168.1.8 \</span><br><span class="line">  unifreq/openwrt-aarch64:latest</span><br></pre></td></tr></table></figure><p>–ip: 容器在网络中的IP</p><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/785d255759cf3636e6854.jpg" alt="运行成功"></p><h3 id="指定LAN口和网关"><a href="#指定LAN口和网关" class="headerlink" title="指定LAN口和网关"></a>指定LAN口和网关</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一次运行，需要修改ip地址，lan口网络（192.168.1.7）和网关（192.168.1.1）</span></span><br><span class="line">docker exec openwrt sed -e &quot;s/192.168.1.1/192.168.1.7/&quot; -i /etc/config/network</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart openwrt</span><br></pre></td></tr></table></figure><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/10a33fedb89351532e579.jpg" alt="配置网络并重启"></p><h3 id="使用openwrt"><a href="#使用openwrt" class="headerlink" title="使用openwrt"></a>使用openwrt</h3><p>浏览器打开 <a href="http://192.168.1.7/">http://192.168.1.7</a> 即可(上面配置IP)</p><p><img src="https://file.mlapp.cn/usr/uploads/2019/10/1570427399298.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机顶盒 </tag>
            
            <tag> armbian </tag>
            
            <tag> docker </tag>
            
            <tag> 旁路由 </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali-wsl自定义路径安装</title>
      <link href="/2023/09/23/jiao-cheng/kali-wsl-zi-ding-yi-lu-jing-an-zhuang/"/>
      <url>/2023/09/23/jiao-cheng/kali-wsl-zi-ding-yi-lu-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>wsl自定义安装发行路径，记录下安装过程，备份。wsl安装其他分发版本也可以按照该教程进行自定义路径安装。关于wsl以及虚拟化相关功能开启本教程已默认开启，关于开启该功能教程请百度一下。</p><h3 id="下载离线发行版"><a href="#下载离线发行版" class="headerlink" title="下载离线发行版"></a>下载离线发行版</h3><p>浏览器打开下方链接，搜索下载发行版，选择自己需要的分发下载即可。可能需要魔法。</p><p><strong><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual">wsl分发下载</a></strong></p><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/cd40163c3dad0ef84dfd6.jpg" alt="wsl分发"></p><h3 id="解压分发"><a href="#解压分发" class="headerlink" title="解压分发"></a>解压分发</h3><p>下载的发行版，可能会是appx结尾，或者其他结尾，这个不重要，直接用解压缩软件将下载的包直接解压出来。直到看见一个exe文件即可。</p><p>注意： exe所在的目录则是该分发的自定义路径。建议执行前将exe文件所在目录的所有文件先移动到自己存放的路径</p><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/78508028c1e73fe5320e9.jpg" alt="解压目录"></p><h3 id="安装分发"><a href="#安装分发" class="headerlink" title="安装分发"></a>安装分发</h3><p>直接双击exe文件会进行初始化，根据提示创建用户和密码即可。当进入到linux里面时证明该wsl已安装完成。你会发现exe所在目录生成了一个磁盘文件vhdx。该文件则是该系统的磁盘文件。</p><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件夹用于存放字体</span></span><br><span class="line">sudo mkdir -p /usr/share/fonts/windows </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将Windows系统中的字体导入到kali中</span></span><br><span class="line">sudo cp -r /mnt/c/Windows/Fonts/*.ttf /usr/share/fonts/windows/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载字体管理器</span></span><br><span class="line">sudo apt install -y fontconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开配置文件  此处需要vi操作知识。建议 vi 进入后 按 G 一定要大写模式 然后按 小写  o  再插入 <span class="built_in">export</span>的所有命令</span></span><br><span class="line">sudo vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在上述文件中添加</span></span><br><span class="line">export LANG=zh_CN.UTF-8</span><br><span class="line">export LANGUAGE=zh_CN.UTF-8</span><br><span class="line">export LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>其他分发到这里就已经结束，kali的话请继续往下看，由于kali是最小化安装所以需要再安装kali的完整工具包</p><h3 id="KaLi完整安装"><a href="#KaLi完整安装" class="headerlink" title="KaLi完整安装"></a>KaLi完整安装</h3><h4 id="检查更新和更新"><a href="#检查更新和更新" class="headerlink" title="检查更新和更新"></a>检查更新和更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt -y upgrade</span><br></pre></td></tr></table></figure><h4 id="安装完整工具包"><a href="#安装完整工具包" class="headerlink" title="安装完整工具包"></a>安装完整工具包</h4><p>这里安装可能耗时比较长请耐心等待</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y kali-linux-large</span><br></pre></td></tr></table></figure><h5 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/c66fff46094140b49e7a0.png" alt="语言"></p><h5 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/9d5d6e871cc5ec6300aa9.png" alt="DHCP"></p><h5 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/f0ed0f0210dddeb6d8a28.png" alt="wireshark"></p><h5 id="kismet"><a href="#kismet" class="headerlink" title="kismet"></a>kismet</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/a555be4e903fd54a85e1d.png" alt="kismet"></p><h5 id="sslh"><a href="#sslh" class="headerlink" title="sslh"></a>sslh</h5><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/18c446ca82df21fe1ada5.png" alt="sslh"></p><h4 id="验证工具"><a href="#验证工具" class="headerlink" title="验证工具"></a>验证工具</h4><p>出现下图情况证明包安装成功，可以愉快的玩耍了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap</span><br></pre></td></tr></table></figure><p><img src="https://e0180ed0.picture-bed-8ov.pages.dev/file/e3ea2cd1ae568f248e5a4.jpg" alt="nmap"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机顶盒秒变服务器</title>
      <link href="/2023/09/03/jiao-cheng/ji-ding-he-bian-fu-wu-qi/"/>
      <url>/2023/09/03/jiao-cheng/ji-ding-he-bian-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>从酷安上了解到极低成本的服务器，那就是将机顶盒刷入armbian系统。启动6~7个docker也无压力；机顶盒功率也才几瓦。跑跑自己的脚本啥的完全够用。故立马在某鱼上捡垃圾，最后70块上车9新魔百和M401A盒子(2+16)+电源，已root。借此记录刷入流程，供大家参考。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、<strong>8G&gt;&#x3D;U盘 一个</strong>(必须是好的 🙄)</p><p>2、<strong>网线一根</strong>(肯定能连上网的 👌)</p><p>3、<strong>电脑一台</strong>(笔记本不行，因为机顶盒需要键盘，不能拆笔记本的，口子也对不上 😜)</p><p>4、<strong>键盘一个</strong>(机顶盒不能意念写入( •̀ ω •́ )✧)</p><p>以上有的就不用操心了，耐心等盒子到手就OK。可以先将armbian镜像写入到U盘。</p><h3 id="镜像写入U盘"><a href="#镜像写入U盘" class="headerlink" title="镜像写入U盘"></a>镜像写入U盘</h3><p>准备刷写工具：</p><p><a href="https://etcher.balena.io/">balenaEtcher</a></p><h4 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h4><p>我是购买的魔百和M401A机顶盒 使用的芯片是amlogic-s905l3a，使用的镜像是ophub大佬的开源仓库<a href="https://github.com/ophub/amlogic-s9xxx-armbian">amlogic-s9xxx-armbian</a> (由衷感谢ophub大佬 ❤)</p><p>进入仓库后前往release下载对应芯片的armbian系统(这里jammy是基于Ubuntu的镜像，bullseye 是基于Debian的镜像，看自己选择了)<br>Armbian_23.08.0_amlogic_s905l3a_jammy_6.1.46_server_2023.08.19.img.gz 镜像</p><p><img src="https://im.gurl.eu.org/file/dcddfd70c279c5d46a06f.png" alt="镜像"></p><p><strong>Tips</strong>:</p><p>镜像若非img结尾则是一个非镜像文件需要解压</p><h4 id="刷写镜像"><a href="#刷写镜像" class="headerlink" title="刷写镜像"></a>刷写镜像</h4><p>U盘插入电脑，打开balenaEtcher，点击“<strong>从文件烧录</strong>”选择下载的镜像文件(img结尾的)，选择目标磁盘为我们的U盘，点击烧录即可。此时等待烧录完成和校验，U盘会自动弹出。此时我们的系统已写入到U盘中。</p><p><img src="https://im.gurl.eu.org/file/5ac23b0a58a238b523b94.png" alt="烧录镜像"></p><h4 id="修改引导为我们的机顶盒芯片"><a href="#修改引导为我们的机顶盒芯片" class="headerlink" title="修改引导为我们的机顶盒芯片"></a>修改引导为我们的机顶盒芯片</h4><p>1、U盘重新插入电脑，若能读取到U盘文件则打开boot文件夹下的 <strong>dtb&#x2F;amlogic&#x2F;</strong> 查找一下对应芯片名称的dtb文件并复制该dtb文件的名称</p><p>2、编辑boot文件夹下的<strong>uEnv.txt</strong>文件,将FDT的最后dtb文件名提换成上一步复制的文件名称并保存uEnv文件</p><p><img src="https://im.gurl.eu.org/file/a96fdd8ae2d5a05bf5bec.png" alt="uEnv文件"></p><p><strong>Tips</strong>:</p><p>1、若U盘插入后windows无法识别到U盘最简单的解决方式是换一个Apple电脑插入进行修改。(不得不说苹果🍎大法好)</p><p>2、若没有苹果电脑可以尝试windows 磁盘管理 看是否存在磁盘未被设定盘符导致无法加载到<strong>我的电脑</strong>，若有的话设定一下盘符既可打开U盘内容</p><p><strong>以上准备工作就已经准备OK，机顶盒到手就可以刷入。</strong></p><h3 id="armbian刷入机顶盒"><a href="#armbian刷入机顶盒" class="headerlink" title="armbian刷入机顶盒"></a>armbian刷入机顶盒</h3><p>首先还是先将机顶盒接电，正常启动先验证下机顶盒是否正常。(毕竟二手先确认货正不正)</p><h4 id="外置启动"><a href="#外置启动" class="headerlink" title="外置启动"></a>外置启动</h4><p>1、正常插入网线、视频输出、电源启动机顶盒</p><p>2、当进入到盒子系统后，去到盒子的已安装的app目录会有一个外置启动器之类的外置启动。</p><p>3、点击外置启动当点击确认后立即，光速，风一样的插入刷写好系统的U盘到离网线插口最近的那个USB口上</p><p>4、此时等待机顶盒从外部启动我们刷写到U盘中的armbian系统</p><p>5、当你看到屏幕开始刷代码(彩虹)的时候证明就已经进入到armbian系统了</p><p>6、当加载完成后会停在输入密码的阶段，输入密码<strong>1234</strong></p><p>7、选择shell类型，选择1 <strong>bash</strong></p><p>8、创建一个用户，设置用户名和密码以及一些什么真实名称啥的</p><p>9、设置时区，和设置语言，若你插入了网线那这里会自动获取，只需要回车一下就行</p><p>9、等待初始化完成后就会进入到armbian系统了(此时启动的是我们U盘里面的系统)</p><p><img src="https://im.gurl.eu.org/file/8546315aaf28e61d99265.png" alt="5步骤"></p><p><img src="https://im.gurl.eu.org/file/c3a9d47d7f38dd5bb7e08.png" alt="7~9步骤"></p><h4 id="将系统写入到机顶盒"><a href="#将系统写入到机顶盒" class="headerlink" title="将系统写入到机顶盒"></a>将系统写入到机顶盒</h4><p>上一步中不是已经进入到系统了吗？ 直接输入写入命令(下方命令)此时会列出能够写入的机顶盒型号。选择我们对应的机顶盒型号并输入对应的ID，这里我的是M401A则<strong>选择ID”306“</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armbian-install</span><br></pre></td></tr></table></figure><p><img src="https://im.gurl.eu.org/file/76575a6eb7a18b7e7c1a6.png" alt="选择机顶盒型号"></p><p>2、选择系统磁盘格式为ext4,而后等待系统写入到机顶盒就行</p><p><img src="https://im.gurl.eu.org/file/bda5786faedf002ed3191.png" alt="磁盘格式"></p><p>3、当页面不在滚动出现<strong>root@armbian:~#</strong> 输入<strong>poweroff</strong>关机</p><p>4、当机顶盒完全关机后 拔下U盘，拔下电源，再重新插入电源，按电源键开机。此时若正常启动后会让输入登录用户名和密码输入root 或者刚我们创建的用户都行，当进入到下面页面则系统刷入成功，就可以愉快的玩耍啦。</p><p><img src="https://im.gurl.eu.org/file/1f9cfecb2370e6fa8b598.png" alt="进入系统"></p><h3 id="安装一些必要软件"><a href="#安装一些必要软件" class="headerlink" title="安装一些必要软件"></a>安装一些必要软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新一下软件包索引</span></span><br><span class="line">apt update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nettools</span></span><br><span class="line">apt install net-tools -y</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker  选择docker ID 中途可能要选择下载软件的地址 选择阿里云的即可</span></span><br><span class="line">armbian-software</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>整个刷写过程并不难，照着教程操作即可，若有问题百度一下就能解决。本次刷写我这边未遇到任何问题一把过。</p><p>接下来谈谈该如何使用可以安装docker 那玩法就多了，docker拉取青龙面板，作为脚本管理。也可以拉取lamp搭建靶场等。自己的一些定时脚本，安装HA做家具智能中控，安装openwrt做软路由等等。</p><p>刷新过程可参考：<br><a href="https://www.bilibili.com/video/BV1VL411z7Mk/?spm_id_from=pageDriver&vd_source=97daad23423657e272eee1d19843efcf">机顶盒刷armbian全程详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> armbian </tag>
            
            <tag> linux </tag>
            
            <tag> 魔百和 </tag>
            
            <tag> M401A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装docker</title>
      <link href="/2023/08/27/jiao-cheng/linux-an-zhuang-docker/"/>
      <url>/2023/08/27/jiao-cheng/linux-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<p>记录下docker服务的安装，目前只涉及到了centos系统，此贴会记录博主在不同系统中的docker安装教程。(其他的什么时候更新就看博主啥时候遇到了)</p><h3 id="CentOS-docker-安装"><a href="#CentOS-docker-安装" class="headerlink" title="CentOS docker 安装"></a>CentOS docker 安装</h3><h4 id="清除已安装的部分-若是新机器可跳过"><a href="#清除已安装的部分-若是新机器可跳过" class="headerlink" title="清除已安装的部分(若是新机器可跳过)"></a>清除已安装的部分(若是新机器可跳过)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \docker-client \docker-client-latest \docker-common \docker-latest \docker-latest-logrotate \docker-logrotate \docker-engine</span><br></pre></td></tr></table></figure><h4 id="前置处理"><a href="#前置处理" class="headerlink" title="前置处理"></a>前置处理</h4><p>yum-complete-transaction    清理未完成事务<br>yum install -y yum-utils    安装依赖工具<br>yum clean all               清楚未完成的包和缓存<br>yum  update                 更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-complete-transaction &amp;&amp; yum install -y yum-utils &amp;&amp; yum clean all &amp;&amp; yum-complete-transaction &amp;&amp; yum update</span><br></pre></td></tr></table></figure><h4 id="安装底层依赖"><a href="#安装底层依赖" class="headerlink" title="安装底层依赖"></a>安装底层依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h4 id="更新yum缓存"><a href="#更新yum缓存" class="headerlink" title="更新yum缓存"></a>更新yum缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker &amp;&amp; systemctl status docker</span><br></pre></td></tr></table></figure><h4 id="测试运行docker"><a href="#测试运行docker" class="headerlink" title="测试运行docker"></a>测试运行docker</h4><p>此步会输出hello-world，输出成功即docker安装成功，就可以愉快的玩耍啦。🎉🎉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python生活-定时发送新闻联播到微信</title>
      <link href="/2023/07/09/yi-xie-jiao-ben/python-sheng-huo-ding-shi-fa-song-xin-wen-lian-bo-dao-wei-xin/"/>
      <url>/2023/07/09/yi-xie-jiao-ben/python-sheng-huo-ding-shi-fa-song-xin-wen-lian-bo-dao-wei-xin/</url>
      
        <content type="html"><![CDATA[<p>分享一个脚本，通过Python开发的一个新闻联播推送脚本。该项目应用场景广泛炒股的大佬们，新闻工作者，要考公的未来接班人以及需要了解国家大事的，都可以通过这个快速的获取到新闻联播信息。</p><p>免去了定时要去观看30分钟的新闻视频。直接文字输出新闻联播，一字不差。直接推送到微信邮箱(微信中的QQ邮箱提醒中绑定的邮箱)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>项目中分为两部分第一部分通过新闻联播地址获取新闻联播的文字内容，第二部分将文字内容发送到邮箱</p><p>我们来看下关键部分获取新闻联播的文字内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4651.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新闻</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hanlder</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsp = requests.get(url, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        rsp.raise_for_status()</span><br><span class="line">        rsp.encoding = rsp.apparent_encoding</span><br><span class="line">        <span class="comment"># print(rsp.text)</span></span><br><span class="line">        <span class="keyword">return</span> rsp.text</span><br><span class="line">    <span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> error:</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_news</span>(<span class="params">url</span>):</span><br><span class="line">    rsp = get_hanlder(url)</span><br><span class="line"></span><br><span class="line">    etr = etree.HTML(rsp)</span><br><span class="line">    titles = etr.xpath(<span class="string">&quot;//li/a/text()&quot;</span>)</span><br><span class="line">    hrefs = etr.xpath(<span class="string">&quot;//li/a/@href&quot;</span>)</span><br><span class="line"></span><br><span class="line">    news = []</span><br><span class="line">    summary = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> title, href <span class="keyword">in</span> <span class="built_in">zip</span>(titles, hrefs):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;《新闻联播》&#x27;</span> <span class="keyword">in</span> title:</span><br><span class="line">            <span class="comment"># 获取新闻概要</span></span><br><span class="line">            title_rsp = get_hanlder(href)</span><br><span class="line">            summary = re.search(<span class="string">r&#x27;&lt;div class=&quot;video_brief&quot;&gt;本期节目主要内容：[\s\S]*。&#x27;</span>, title_rsp).group(</span><br><span class="line">                <span class="number">0</span>) + <span class="string">&quot;&lt;/div&gt;\n\n\n&quot;</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新闻标题去掉视频并处理成超链接  橙色 #D2691E</span></span><br><span class="line">        tit = re.sub(<span class="string">r&quot;\[视频\]?&quot;</span>, <span class="string">&quot;&quot;</span>, title)</span><br><span class="line"></span><br><span class="line">        subtitle = <span class="string">f&#x27;&lt;a href=\&quot;<span class="subst">&#123;href&#125;</span>\&quot; style=&quot;color:#4682B4&quot;&gt;&lt;b&gt;<span class="subst">&#123;tit&#125;</span>&lt;/b&gt;&lt;/a&gt;&#x27;</span></span><br><span class="line">        summary = re.sub(tit, subtitle, summary)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取新闻正文并添加到news</span></span><br><span class="line">        news_text = get_hanlder(href)</span><br><span class="line"></span><br><span class="line">        news_th = re.findall(<span class="string">r&#x27;&lt;div class=&quot;content_area&quot; id=&quot;content_area&quot;&gt;.*&lt;/div&gt;&#x27;</span>, news_text)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        news.append(<span class="string">f&quot;<span class="subst">&#123;subtitle&#125;</span>\n<span class="subst">&#123;news_th&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    news.insert(<span class="number">0</span>, summary)</span><br><span class="line">    <span class="keyword">return</span> news</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">email_send</span>(<span class="params">rsp, strdate</span>):</span><br><span class="line">    <span class="comment"># 发送数据到邮箱 此处发送端为QQ邮箱</span></span><br><span class="line">    yag = yagmail.SMTP(user=<span class="string">&#x27;yourQQ@qq.com&#x27;</span>, password=<span class="string">&#x27;your send code&#x27;</span>, host=<span class="string">&#x27;smtp.qq.com&#x27;</span>, port=<span class="number">465</span>)</span><br><span class="line">    yag.send(to=[<span class="string">&quot;acceptQQ1@qq.com&quot;</span>, <span class="string">&quot;acceptQQ2@qq.com&quot;</span>], subject=<span class="string">f&quot;<span class="subst">&#123;strdate&#125;</span>日新闻联播推送&quot;</span>, contents=rsp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;邮件已发送请查收...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># event,context这两个参数不同的厂商是不同的名称，请根据厂商的示例进行修改即可</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scf_run</span>(<span class="params">event, context</span>):</span><br><span class="line">    <span class="comment"># 获取日期这里默认为第二天获取前一天的所以-1,若是当天获取则无需-1改为0即可</span></span><br><span class="line">    strTime = (datetime.date.today() + datetime.timedelta(-<span class="number">1</span>)).strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">f&#x27;https://tv.cctv.com/lm/xwlb/day/<span class="subst">&#123;strTime&#125;</span>.shtml&#x27;</span></span><br><span class="line"></span><br><span class="line">    news_text = get_news(url)</span><br><span class="line"></span><br><span class="line">    email_send(news_text, strTime)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若部署在云函数上请把下面这行注释掉,非云函数上不用注释</span></span><br><span class="line">scf_run(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码释义：<br>首先将新闻联播页面通过Xpath获取我们需要获取的新闻联播的标题以及链接。再将链接和标题进行绑定循环取出并获取内容。<br>将获取的内容作为邮件的内容进行发送</p><p>tips:</p><p>1、默认调用时是获取前一天的内容，若需要获取当天的请把里面(datetime.date.today() + datetime.timedelta(-1)).strftime(“%Y%m%d”) 这段代码中的“-1”修改为“0”，若当天执行时为20:00前可能会获取不到因为当天的新闻还没出来</p><p>2、请注意修改发送者的邮箱和开启SMTP服务后的秘钥</p><h3 id="邮件展示"><a href="#邮件展示" class="headerlink" title="邮件展示"></a>邮件展示</h3><p><img src="https://im.gurl.eu.org/file/327217c814cecb814371b.png" alt="邮件展示"></p><h3 id="定时发送"><a href="#定时发送" class="headerlink" title="定时发送"></a>定时发送</h3><p>定时发送这里有两个选择，第一种就是自己有服务器，通过crontab 进行定时调用。第二种就是通过各大云厂商的云函数进行部署，设定函数触发时间即可。重要的是不需要掏服务器钱，云函数的每月免费额度以及够用了。（目前华为云的云函数是可以免费额度）</p>]]></content>
      
      
      <categories>
          
          <category> 一些脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 新闻 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
